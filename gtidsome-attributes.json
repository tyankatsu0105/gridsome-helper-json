{
  "to": {
    "description": "Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a location descriptor object."
  },
  "replace": {
    "type": "boolean",
    "description": "Setting replace prop will call router.replace() instead of router.push() when clicked, so the navigation will not leave a history record."
  },
  "append": {
    "type": "boolean",
    "description": "Setting append prop always appends the relative path to the current path. For example, assuming we are navigating from /a to a relative link b, without append we will end up at /b, but with append we will end up at /a/b."
  },
  "tag": {
    "description": "Specify which tag to render to, and it will still listen to click events for navigation."
  },
  "active-class": {
    "description": "Configure the active CSS class applied when the link is active."
  },
  "exact": {
    "description": "The default active class matching behavior is inclusive match. For example, <router-link to=\"/a\"> will get this class applied as long as the current path starts with /a/ or is /a.\nOne consequence of this is that <router-link to=\"/\"> will be active for every route! To force the link into \"exact match mode\", use the exact prop: <router-link to=\"/\" exact>"
  },
  "event": {
    "description": "Specify the event(s) that can trigger the link navigation."
  },
  "exact-active-class": {
    "description": "Configure the active CSS class applied when the link is active with exact match. Note the default value can also be configured globally via the linkExactActiveClass router constructor option."
  },
  "src": {
    "description": "description for src"
  },
  "width": {
    "description": "description for width"
  },
  "height": {
    "description": "description for height"
  },
  "alt": {
    "description": "description for alt"
  },
  "fit": {
    "description": "description for fit"
  },
  "background": {
    "description": "description for background"
  },
  "immediate": {
    "description": "description for immediate"
  },
  "blur": {
    "description": "description for blur"
  },
  "quality": {
    "description": "description for quality"
  },
  "cover": {
    "description": "description for cover"
  },
  "contain": {
    "description": "description for contain"
  },
  "fill": {
    "description": "description for fill"
  },
  "inside": {
    "description": "description for inside"
  },
  "outside": {
    "description": "description for outside"
  },
  "Property": {
    "description": "description for Property"
  },
  "info": {
    "description": "description for info"
  },
  "showLinks": {
    "description": "description for showLinks"
  },
  "showNavigation": {
    "description": "description for showNavigation"
  },
  "linkClass": {
    "description": "description for linkClass"
  },
  "firstLabel": {
    "description": "description for firstLabel"
  },
  "prevLabel": {
    "description": "description for prevLabel"
  },
  "nextLabel": {
    "description": "description for nextLabel"
  },
  "lastLabel": {
    "description": "description for lastLabel"
  },
  "ariaLabel": {
    "description": "description for ariaLabel"
  },
  "ariaLinkLabel": {
    "description": "description for ariaLinkLabel"
  },
  "ariaFirstLabel": {
    "description": "description for ariaFirstLabel"
  },
  "ariaCurrentLabel": {
    "description": "description for ariaCurrentLabel"
  },
  "ariaPrevLabel": {
    "description": "description for ariaPrevLabel"
  },
  "ariaNextLabel": {
    "description": "description for ariaNextLabel"
  },
  "ariaLastLabel": {
    "description": "description for ariaLastLabel"
  },
}